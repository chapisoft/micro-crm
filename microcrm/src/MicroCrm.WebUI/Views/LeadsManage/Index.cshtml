@model MicroCrm.Domain.Models.Leads
@{
  ViewData["Title"] = "Leads Manage";
  ViewData["PageName"] = "LeadsManage_Index";
  ViewData["Heading"] = "<i class='fal fa-window text-primary'></i> Leads Manage";
  ViewData["Category1"] = "CRM";
  ViewData["PageDescription"] = "";
}
<style>
  .datagrid-body .datagrid-cell, .datagrid-footer .datagrid-cell {
    text-wrap: wrap;
  }
</style>
<div class="row">
  <div class="col-lg-12 col-xl-12">
    <div id="panel-leads" class="panel">
      <div class="panel-hdr">
        <h2>
          Leads Manage
        </h2>
        <div class="panel-toolbar">
          <button id="btnCollapse1" class="btn btn-panel bg-transparent fs-xl w-auto h-auto rounded-0" data-action="panel-collapse" data-toggle="tooltip" data-offset="0,10" data-original-title="Collapse"><i class="fal fa-window-minimize"></i></button>
          <button class="btn btn-panel bg-transparent fs-xl w-auto h-auto rounded-0" data-action="panel-fullscreen" data-toggle="tooltip" data-offset="0,10" data-original-title="Fullscreen"><i class="fal fa-expand"></i></button>
        </div>

      </div>
      <div class="panel-container enable-loader show">
        <div class="loader"><i class="fal fa-spinner-third fa-spin-4x fs-xxl"></i></div>
        <div class="panel-content py-2 rounded-bottom border-faded border-left-0 border-right-0  text-muted bg-subtlelight-fade ">
          <div class="row no-gutters align-items-center">
            <div class="col">
              <div class="btn-group btn-group-sm">
                <button name="searchbutton" class="btn btn-default"> <span class="fal fa-search mr-1"></span> Search </button>
                <button type="button" class="btn btn-default dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                  <span class="sr-only">Toggle Dropdown</span>
                </button>
                <div class="dropdown-menu dropdown-menu-animated">
                  <button name="searchmemenu" class="dropdown-item js-waves-on"> My Records </button>
                  <div class="dropdown-divider"></div>
                  <button name="searchcustommenu" class="dropdown-item js-waves-on"> Customize Search </button>
                </div>
              </div>
              <div class="btn-group btn-group-sm">
                <button name="appendbutton" class="btn btn-default">
                  <span class="fal fa-plus mr-1"></span> Add
                </button>
              </div>
              <div class="btn-group btn-group-sm">
                <button name="deletebutton" disabled class="btn btn-default">
                  <span class="fal fa-times mr-1"></span> Delete
                </button>
              </div>
              <div class="btn-group btn-group-sm">
                <button name="savebutton" disabled class="btn btn-default">
                  <span class="fal fa-save mr-1"></span> Save
                </button>
              </div>
              <div class="btn-group btn-group-sm">
                <button name="cancelbutton" disabled class="btn btn-default">
                  <span class="fal fa-ban mr-1"></span> Cancel
                </button>
              </div>

              <div class="btn-group btn-group-sm hidden-xs">
                <button type="button" name="importbutton" class="btn btn-default"><span class="fal fa-cloud-upload mr-1"></span> Import </button>
                <button type="button" class="btn btn-default  dropdown-toggle dropdown-toggle-split waves-effect waves-themed" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                  <span class="sr-only">Toggle Dropdown</span>
                </button>
                <div class="dropdown-menu dropdown-menu-animated">
                  <a class="dropdown-item js-waves-on" name="downloadmenu" href="javascript:void()">
                    <span class="fal fa-download"></span> Download the template
                  </a>
                </div>
              </div>
              <div class="btn-group btn-group-sm hidden-xs">
                <button name="exportbutton" class="btn btn-default">
                  <span class="fal fa-file-export mr-1"></span>  Export
                </button>
              </div>

            </div>

          </div>

        </div>
        <div class="panel-content">
          <div class="table-responsive">
            <table id="companies_datagrid">
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<div class="row">
  <div class="col-lg-12 col-xl-12">
    <div id="panel-2" class="panel">
      <div class="panel-hdr">
        <h2>
          Leads Information
        </h2>
        <div class="panel-toolbar">
          @*<button id="btnCollapse2" class="btn btn-panel bg-transparent fs-xl w-auto h-auto rounded-0" data-action="panel-collapse" data-toggle="tooltip" data-offset="0,10" data-original-title="Collapse"><i class="fal fa-window-minimize"></i></button>*@
          <button class="btn btn-panel bg-transparent fs-xl w-auto h-auto rounded-0" data-action="panel-fullscreen" data-toggle="tooltip" data-offset="0,10" data-original-title="Fullscreen"><i class="fal fa-expand"></i></button>
        </div>

      </div>
      <div id="panel-infor" class="panel-container enable-loader show">
        <div class="loader"><i class="fal fa-spinner-third fa-spin-4x fs-xxl"></i></div>
        <div class="panel-content">
          <div class="panel-container show">
            <div class="panel-content">
              <ul class="nav nav-tabs" role="tablist">
                <li class="nav-item active">
                  <a class="nav-link active fs-xl py-3 px-5" data-toggle="tab" href="#tab-company" role="tab">
                    <i class="@(Settings.Theme.IconPrefix) fal fa-landmark text-success"></i>
                    <span class="hidden-sm-down ml-1">COMPANY</span>
                  </a>
                </li>
                <li class="nav-item">
                  <a class="nav-link fs-xl py-3 px-5" data-toggle="tab" href="#tab-contact" role="tab">
                    <i class="@(Settings.Theme.IconPrefix) fal fa-id-card" text-primary"></i>
                    <span class="hidden-sm-down ml-1">CONTACT</span>
                  </a>
                </li>
                <li class="nav-item">
                  <a class="nav-link fs-xl py-3 px-5" data-toggle="tab" href="#tab-application" role="tab">
                    <i class="@(Settings.Theme.IconPrefix) fal fa-money-check-edit-alt text-danger"></i>
                    <span class="hidden-sm-down ml-1">APPLICATION</span>
                  </a>
                </li>
                <li class="nav-item">
                  <a class="nav-link fs-xl py-3 px-5" data-toggle="tab" href="#tab-activity" role="tab">
                    <i class="@(Settings.Theme.IconPrefix) fal fa-tags text-success"></i>
                    <span class="hidden-sm-down ml-1">ACTIVITY</span>
                  </a>
                </li>
                <li class="nav-item">
                  <a class="nav-link fs-xl py-3 px-5" data-toggle="tab" href="#tab-quotation" role="tab">
                    <i class="@(Settings.Theme.IconPrefix) fal fa-paperclip text-primary"></i>
                    <span class="hidden-sm-down ml-1">QUOTATION</span>
                  </a>
                </li>
                <li class="nav-item">
                  <a class="nav-link fs-xl py-3 px-5" data-toggle="tab" href="#tab-sales" role="tab">
                    <i class="@(Settings.Theme.IconPrefix) fa-cog text-danger"></i>
                    <span class="hidden-sm-down ml-1">SALES</span>
                  </a>
                </li>
              </ul>
              <div class="tab-content p-3">
                <div class="tab-pane fade show active" id="tab-company" role="tabpanel" aria-labelledby="tab-company">
                  <partial name="CompanyInfo" />
                </div>
                <div class="tab-pane fade" id="tab-contact" role="tabpanel" aria-labelledby="tab-contact">
                  <partial name="Contacts" />
                </div>
                <div class="tab-pane fade" id="tab-application" role="tabpanel" aria-labelledby="tab-application">
                  <partial name="Projects" />
                </div>
                <div class="tab-pane fade " id="tab-activity" role="tabpanel" aria-labelledby="tab-activity">
                  <partial name="Activities" />
                </div>
                <div class="tab-pane fade" id="tab-quotation" role="tabpanel" aria-labelledby="tab-quotation">
                  <partial name="Quotations" />
                </div>
                <div class="tab-pane fade" id="tab-sales" role="tabpanel" aria-labelledby="tab-sales">
                  <partial name="Sales" />
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<div id="companydetailwindow" class="easyui-window"
     title="Detailed data"
     data-options="modal:true,
                    closed:true,
                    minimizable:false,
                    collapsible:false,
                    maximized:false,
                    iconCls:'fal fa-window',
                    onOpen:function(){
                       $(this).window('vcenter');
                       $(this).window('hcenter');
                    },
                    onRestore:function(){
                    },
                    onMaximize:function(){
                    }
                    " style="width:720px;height:420px;display:none">
  <!-- toolbar -->
  <div class="panel-content py-2 rounded-bottom border-faded border-left-0 border-right-0  text-muted bg-subtlelight-fade sticky-top">
    <div class="d-flex flex-row-reverse pr-4">
      <div class="btn-group btn-group-sm mr-1">
        <button name="saveitembutton" class="btn btn-default">
          <i class="fal fa-save"></i> Save
        </button>
      </div>
      <div class="btn-group btn-group-sm mr-1" id="deleteitem-btn-group">
        <button name="deleteitembutton" class="btn btn-danger">
          <i class="fal fa-trash-alt"></i> Delete
        </button>
      </div>
    </div>
  </div>
  <div class="panel-container show">
    <div class="container">
      <div class="panel-content">
        <partial name="CompanyEdit" />
      </div>
    </div>
  </div>
</div>


@await Component.InvokeAsync("ImportExcel", new ImportExcelOptions
{
  entity = "Company",
  folder = "Companies",
  url = "/Companies",
  tpl = "Company.xlsx",
  callback = "reload()"
})

@section HeadBlock {
  <link href="~/css/formplugins/bootstrap-daterangepicker/bootstrap-daterangepicker.css" rel="stylesheet" asp-append-version="true" />
  <link href="~/js/easyui/themes/insdep/easyui.css" rel="stylesheet" asp-append-version="true" />
}
@section ScriptsBlock {

  <script src="~/js/plugin/jquery.validation/jquery.validate.js" asp-append-version="true"></script>
  <script src="~/js/plugin/jquery.validation/jquery.validate.unobtrusive.js" asp-append-version="true"></script>
  <script src="~/js/plugin/jquery.form.binding/jquery-json-form-binding.js" asp-append-version="true"></script>
  <script src="~/js/dependency/numeral/numeral.min.js" asp-append-version="true"></script>
  <script src="~/js/dependency/moment/moment.js" asp-append-version="true"></script>
  <script src="~/js/formplugins/bootstrap-daterangepicker/bootstrap-daterangepicker.js" asp-append-version="true"></script>
  <script src="~/js/easyui/jquery.easyui.min.js" asp-append-version="true"></script>
  <script src="~/js/easyui/plugins/datagrid-filter.js" asp-append-version="true"></script>
  <script src="~/js/easyui/plugins/columns-ext.js" asp-append-version="true"></script>
  <script src="~/js/easyui/plugins/columns-reset.js" asp-append-version="true"></script>
  <script src="~/js/easyui/locale/easyui-lang-en.js" asp-append-version="true"></script>
  <script src="~/js/easyui/jquery.easyui.component.js" asp-append-version="true"></script>
  <script src="~/js/plugin/filesaver/FileSaver.js" asp-append-version="true"></script>
  <script src="~/js/plugin/jquery.serializejson/jquery.serializejson.js" asp-append-version="true"></script>
  <script src="~/js/jquery.custom.extend.js" asp-append-version="true"></script>
  <script src="~/js/jquery.extend.formatter.js" asp-append-version="true"></script>

  <script>
    var $dgWidth = 0;
    //Full Screen Event
    document.addEventListener('panel.onfullscreen', () => {
      $dgActivity.treegrid('resize');
      $dgAqDetail.treegrid('resize');
      $dgContact.treegrid('resize');
      $dgProject.treegrid('resize');
      $dgQuotation.treegrid('resize');
      $dgSale.treegrid('resize');
    });
    // Activity
    var $dgActivity = $('#activities_datagrid');
    $dgActivity.css('width', '100%');
    var EDITINLINEActivity = false;
    var activity = null;
    var editIndexActivity = undefined;
    // AqDetail
    var $dgAqDetail = $('#aqDetails_datagrid');
    $dgAqDetail.css('width', '100%');
    var EDITINLINEAqDetail = false;
    var aqDetail = null;
    var editIndexAqDetail = undefined;
    // Contact
    var $dgContact = $('#contacts_datagrid');
    $dgContact.css('width', '100%');
    var EDITINLINEContact = false;
    var contact = null;
    var editIndexContact = undefined;
    // Project
    var $dgProject = $('#projects_datagrid');
    $dgProject.css('width', '100%');
    var EDITINLINEProject = false;
    var project = null;
    var editIndexProject = undefined;
    // Quotation
    var $dgQuotation = $('#quotations_datagrid');
    $dgQuotation.css('width', '100%');
    var EDITINLINEQuotation = false;
    var quotation = null;
    var editIndexQuotation = undefined;
    // Sale
    var $dgSale = $('#sales_datagrid');
    $dgSale.css('width', '100%');
    var EDITINLINESale = false;
    var sale = null;
    var editIndexSale = undefined;

    $(document).ready(function () {
      // Home
      $("#panel-infor").hide();
    });

    class company {
      constructor() {
        //this.$dg = $('#companies_datagrid');
        this.EDITINLINE = true;
        this.MODELSTATE = null;
        this.item = null;
        this.editIndex = undefined;
        this.id = null;
        this.init();
      }
      init() {
        this.$searchbutton = $('button[name="searchbutton"]');
        this.$appendbutton = $('button[name="appendbutton"]');
        this.$deletebutton = $('button[name="deletebutton"]');
        this.$savebutton = $('button[name="savebutton"]');
        this.$cancelbutton = $('button[name="cancelbutton"]');
        this.$importbutton = $('button[name="importbutton"]');
        this.$downloadmenu = $('a[name="downloadmenu"]');
        this.$exportbutton = $('button[name="exportbutton"]');
        this.$searchmemenu = $('a[name="searchmemenu"]');
        this.$searchcustommenu = $('a[name="searchcustommenu"]');
        this.$saveitembutton = $('button[name="saveitembutton"]');
        this.$deleteitembutton = $('button[name="deleteitembutton"]');
        this.$detailwindow = $("#companydetailwindow");
        this.$form = $('#company_form');
        this.$formview = $('#company_view');

        document.addEventListener('panel.onfullscreen', () => {
          this.$dg.datagrid('resize');
        })
        this.$searchbutton.on('click', this.reloadData.bind(this));
        this.$appendbutton.on('click', this.appendItem.bind(this));
        this.$deletebutton.on('click', this.removeItem.bind(this));
        this.$savebutton.on('click', this.acceptChanges.bind(this));
        this.$cancelbutton.on('click', this.rejectChanges.bind(this));
        this.$exportbutton.on('click', this.exportexcel.bind(this));
        this.$importbutton.on('click', () => {
          importExcel.upload();
        });
        this.$downloadmenu.on('click', () => {
          importExcel.downloadtemplate();
        })
        this.$saveitembutton.on('click', this.saveItem.bind(this));
        this.$deleteitembutton.on('click', this.deleteItem.bind(this));

        this.$dg = $('#companies_datagrid').datagrid({
          rownumbers: true,
          checkOnSelect: false,
          selectOnCheck: false,
          idField: 'Id',
          sortName: 'Id',
          sortOrder: 'desc',
          remoteFilter: true,
          singleSelect: true,
          method: 'get',
          clientPaging: false,
          pagination: true,
          striped: true,
          height: 400,
          pageSize: 10,
          pageList: [10, 20],
          filterRules: [],
          onClickCell: (index, field) => {
            this.onClickCell(index, field);
          },
          onBeforeLoad: () => {
            $('.enable-loader').removeClass('enable-loader')
          },
          onLoadSuccess: () => {
            this.editIndex = undefined;
            this.$deletebutton.prop('disabled', true);
            this.$savebutton.prop('disabled', true);
            this.$cancelbutton.prop('disabled', true);
            this.bindActionEvents();
          },
          onCheckAll: (rows) => {
            if (rows.length > 0) {
              this.$deletebutton.prop('disabled', false);
            }
          },
          onUncheckAll: () => {
            this.$deletebutton.prop('disabled', true);
          },
          onCheck: () => {
            this.$deletebutton.prop('disabled', false);
          },
          onUncheck: () => {
            const checked = this.$dg.datagrid('getChecked').length > 0;
            this.$deletebutton.prop('disabled', !checked);
          },
          onSelect: (index, row) => {
            this.item = row;
          },
          onBeginEdit: function (index, row) {
            //const editors = $(this).datagrid('getEditors', index);

          },
          onEndEdit: (index, row) => {
            this.editIndex = undefined;
          },
          onBeforeEdit: (index, row) => {
            row.editing = true;
            this.editIndex = index;
            this.$deletebutton.prop('disabled', false);
            this.$savebutton.prop('disabled', false);
            this.$cancelbutton.prop('disabled', false);
            this.$dg.datagrid('refreshRow', index);
          },
          onAfterEdit: (index, row) => {
            row.editing = false;
            this.editIndex = undefined;
            this.$dg.datagrid('refreshRow', index);
          },
          onCancelEdit: (index, row) => {
            row.editing = false;
            this.editIndex = undefined;
            this.$deletebutton.prop('disabled', true);
            this.$savebutton.prop('disabled', true);
            this.$cancelbutton.prop('disabled', true);
            this.$dg.datagrid('refreshRow', index);
          },
          frozenColumns: [[
            { field: 'ck', checkbox: true },
            {
              field: 'action',
              title: 'Operate',
              width: 120,
              sortable: false,
              resizable: true,
              formatter: (value, row, index) => {
                if (!row.editing && !row.Private) {
                  return `<div class="btn-group">\
                              <button name="actionbutton" data-cmd="operation"  data-index="${index}" data-id="${row.Id}" class="btn btn-primary btn-icon waves-effect waves-themed" title="Operation" ><i class="fal fa-ballot-check"></i> </button>\
                              <button name="actionbutton" data-cmd="edit"  data-index="${index}" data-id="${row.Id}" class="btn btn-primary btn-icon waves-effect waves-themed" title="Edit Details" ><i class="fal fa-edit"></i> </button>\
                              <button name="actionbutton" data-cmd="delete" data-index="${index}" data-id="${row.Id}" class="btn btn-primary btn-icon waves-effect waves-themed" title="Delete Record" ><i class="fal fa-times"></i> </button>\
                        </div>`;
                } else {
                  return `<button class="btn btn-primary btn-sm btn-icon waves-effect waves-themed" disabled title="View Details"  ><i class="fal fa-edit"></i> </button>`;
                }
              }
            }
          ]],
          columns: [[
            {
              field: 'Name',
              title: '<span class="required">@Html.DisplayNameFor(model => model.Company.Name)</span>',
              width: 200,
              hidden: false,
              editor: {
                type: 'textbox',
                options: { prompt: '@Html.DescriptionFor(model => model.Company.Name)', required: true, validType: 'length[0,250]' }
              },
              sortable: true,
              resizable: true
            },
            {
              field: 'FullName',
              title: '<span>@Html.DisplayNameFor(model => model.Company.FullName)</span>',
              width: 200,
              hidden: false,
              editor: {
                type: 'textbox',
                options: { prompt: '@Html.DescriptionFor(model => model.Company.FullName)', required: true, validType: 'length[0,250]' }
              },
              sortable: true,
              resizable: true
            },
            {
              field: 'Code',
              title: '<span class="required">@Html.DisplayNameFor(model => model.Company.Code)</span>',
              width: 120,
              hidden: false,
              editor: {
                type: 'textbox',
                options: { prompt: '@Html.DescriptionFor(model => model.Company.Code)', required: true, validType: 'length[0,12]' }
              },
              sortable: true,
              resizable: true
            },
            {
              field: 'Address',
              title: '@Html.DisplayNameFor(model => model.Company.Address)',
              width: 200,
              hidden: false,
              editor: {
                type: 'textbox',
                options: { prompt: '@Html.DescriptionFor(model => model.Company.Address)', required: false, validType: 'length[0,500]' }
              },
              sortable: true,
              resizable: true
            },
            {
              field: 'Contact',
              title: '@Html.DisplayNameFor(model => model.Company.Contact)',
              width: 120,
              hidden: false,
              editor: {
                type: 'textbox',
                options: { prompt: '@Html.DescriptionFor(model => model.Company.Contact)', required: false, validType: 'length[0,250]' }
              },
              sortable: true,
              resizable: true
            },
            {
              field: 'PhoneNumber',
              title: '@Html.DisplayNameFor(model => model.Company.PhoneNumber)',
              width: 120,
              hidden: false,
              editor: {
                type: 'textbox',
                options: { prompt: '@Html.DescriptionFor(model => model.Company.PhoneNumber)', required: false, validType: 'length[0,20]' }
              },
              sortable: true,
              resizable: true
            },
            {
              field: 'PostCode',
              title: '@Html.DisplayNameFor(model => model.Company.PostCode)',
              width: 120,
              hidden: false,
              editor: {
                type: 'textbox',
                options: { prompt: '@Html.DescriptionFor(model => model.Company.PostCode)', required: false, validType: 'length[0,250]' }
              },
              sortable: true,
              resizable: true
            },
            {
              field: 'Private',
              title: '<span class="required">@Html.DisplayNameFor(model => model.Company.Private)</span>',
              width: 80,
              align: 'center',
              hidden: false,
              formatter: checkboxformatter,
              sortable: true,
              resizable: true
            },
            {
              field: 'Note',
              title: '@Html.DisplayNameFor(model => model.Company.Note)',
              width: 250,
              hidden: false,
              editor: {
                type: 'textbox',
                options: { prompt: '@Html.DescriptionFor(model => model.Company.Note)', required: false, validType: 'length[0,250]' }
              },
              sortable: true,
              resizable: true
            },
            {
              field: 'RegisterDate',
              title: '<span class="required">@Html.DisplayNameFor(model => model.Company.RegisterDate)</span>',
              width: 140,
              align: 'right',
              hidden: false,
              editor: {
                type: 'datebox',
                options: { prompt: '@Html.DescriptionFor(model => model.Company.RegisterDate)', required: true }
              },
              formatter: dateformatter,
              sortable: true,
              resizable: true
            }
          ]]
        }).datagrid('columnMoving')
          .datagrid('resetColumns')
          .datagrid('enableFilter', [
            {
              field: 'RegisterDate',
              type: 'dateRange',
              options: {
                onChange: value => {
                  $dg.datagrid('addFilterRule', {
                    field: 'RegisterDate',
                    op: 'between',
                    value: value
                  });

                  $dg.datagrid('doFilter');
                }
              }
            },
          ])
          .datagrid('load', '/Companies/GetData');
      }

      bindActionEvents() {
        $('button[name="actionbutton"]').off('click').on('click', $('button[name="actionbutton"]'), (e) => {
          console.log('-------')
          console.log(e)
          let $button = null;
          if ($(e.target).is(':button')) {
            $button = $(e.target);
          } else {
            $button = $(e.target).parent();
          }
          const action = $button.data('cmd');
          const id = $($button).data('id');
          const index = $($button).data('index');
          if (action == 'edit') {
            this.editItem(id, index);
          } else if (action == 'delete') {
            this.deleteRow(id);
          } else if (action == 'operation') {
            this.operationItem(id, index);
          }

        });

      }

      exportexcel() {
        const filterRules = JSON.stringify(this.$dg.datagrid('options').filterRules);
        $.messager.progress({ title: 'Please wait', msg: 'Export in progress...' });
        let formData = new FormData();
        formData.append('filterRules', filterRules);
        formData.append('sort', 'Id');
        formData.append('order', 'asc');
        $.postDownload('/Companies/ExportExcel', formData).then(res => {
          $.messager.progress('close');
          toastr.success('Export successful!');
        }).catch(err => {
          //console.log(err);
          $.messager.progress('close');
          $.messager.alert('Export failed', err.statusText, 'error');
        });

      }

      showContextMenu(e, index) {
        this.$dg.datagrid('columnMenu').menu('show', {
          left: e.pageX,
          top: e.pageY
        });
      }

      editItem(id, index) {
        this.MODELSTATE = "Modified"
        this.item = this.$dg.datagrid('getRows')[index];
        this.showDetailWindow(this.item);
      }

      operationItem(id, index) {
        this.item = this.$dg.datagrid('getRows')[index];
        this.showDetailCompany(this.item);
      }

      reloadData() {
        this.$dg.datagrid('unselectAll');
        this.$dg.datagrid('uncheckAll');
        this.$dg.datagrid('reload');
      }

      appendItem() {
        this.item = {
          Address: '-',
          RegisterDate: moment().format('YYYY-MM-DD HH:mm:ss'),
        };
        if (!this.EDITINLINE) {
          this.MODELSTATE = 'Added';
          this.showDetailWindow(this.item);
        } else {
          if (this.endEditing()) {
            this.$dg.datagrid('insertRow',
              {
                index: 0,
                row: this.item
              });
            this.editIndex = 0;
            this.$dg.datagrid('selectRow', this.editIndex)
              .datagrid('beginEdit', this.editIndex);
            this.hook = true;
          }
        }
      }

      removeItem() {
        if (this.$dg.datagrid('getChecked').length <= 0 && this.EDITINLINE) {
          if (this.editIndex !== undefined) {
            const delindex = this.editIndex;
            this.$dg.datagrid('cancelEdit', delindex)
              .datagrid('deleteRow', delindex);
            this.hook = true;
          } else {
            const rows = this.$dg.datagrid('getChecked');
            rows.slice().reverse().forEach(row => {
              const rowindex = this.$dg.datagrid('getRowIndex', row);
              this.$dg.datagrid('deleteRow', rowindex);
              this.hook = true;
            });
          }
          this.$savebutton.prop('disabled', false);
          this.$cancelbutton.prop('disabled', false);
        } else {
          this.deletechecked();
        }
      }

      deleteRow(id) {
        $.messager.confirm('Confirm', 'Are you sure you want to delete this record?', result => {
          if (result) {
            this.dodeletechecked([id]);
          }
        })
      }

      deletechecked() {
        const id = this.$dg.datagrid('getChecked').filter(item => item.Id > 0).map(item => {
          return item.Id;
        });
        if (id.length > 0) {
          $.messager.confirm('Confirm', `You must delete this <span class='badge badge-icon position-relative'>${id.length} </span> line of records ?`, result => {
            if (result) {
              this.dodeletechecked(id);
            }
          });
        } else {
          $.messager.alert('Success', 'Please select the record to be deleted first!', 'question');
        }
      }

      dodeletechecked(id) {
        $.post('/Companies/DeleteChecked', { id: id })
          .done(response => {
            if (response.success) {
              toastr.error(`Successfully Delete[${id.length}] rows of records`);
              this.reloadData();
            } else {
              $.messager.alert('Error', response.err, 'error');
            }
          })
          .fail((jqXHR, textStatus, errorThrown) => {
            $.messager.alert('Error', `${jqXHR.status}: ${jqXHR.statusText} `, 'error');
          });
      }

      onClickCell(index, field) {
        console.log('onClickCell')
        this.item = this.$dg.datagrid('getRows')[index];
        const _actions = ['action', 'ck'];
        if (!this.EDITINLINE || $.inArray(field, _actions) >= 0) {
          return;
        }

        if (this.editIndex !== index) {
          if (this.endEditing()) {
            this.$dg.datagrid('selectRow', index)
              .datagrid('beginEdit', index);
            this.hook = true;
            this.editIndex = index;
            const ed = this.$dg.datagrid('getEditor', { index: index, field: field });
            if (ed) {
              ($(ed.target).data('textbox') ? $(ed.target).textbox('textbox') : $(ed.target)).focus();
            }
          } else {
            this.$dg.datagrid('selectRow', index);
          }
        }
      }

      endEditing() {
        if (this.editIndex === undefined) {
          return true;
        }
        if (this.$dg.datagrid('validateRow', this.editIndex)) {
          this.$dg.datagrid('endEdit', this.editIndex);
          return true;
        } else {
          const invalidinput = $('input.validatebox-invalid', this.$dg.datagrid('getPanel'));
          const fieldnames = invalidinput.map((index, item) => {
            return $(item).attr('placeholder') || $(item).attr('id');
          });
          $.messager.alert('Success', `${Array.from(fieldnames)} The input is incorrect.`, 'error');
          return false;
        }
      }

      acceptChanges() {
        if (this.endEditing()) {
          if (this.$dg.datagrid('getChanges').length > 0) {
            const inserted = this.$dg.datagrid('getChanges', 'inserted').map(item => {
              item.TrackingState = 1;
              return item;
            });
            const updated = this.$dg.datagrid('getChanges', 'updated').map(item => {
              item.TrackingState = 2
              return item;
            });
            const deleted = this.$dg.datagrid('getChanges', 'deleted').map(item => {
              item.TrackingState = 3
              return item;
            });

            const changed = inserted.concat(updated.filter(item => {
              return !deleted.includes(item);
            })).concat(deleted);
            //$.messager.progress({ title: 'Please wait', msg: 'Accepting data...', interval: 200 });
            $.post('/Companies/AcceptChanges', { companies: changed })
              .done(response => {
                //$.messager.progress('close');
                //console.log(response);
                if (response.success) {
                  toastr.success('Saved successfully');
                  this.$dg.datagrid('acceptChanges');
                  this.reloadData();
                  this.hook = false;
                } else {
                  $.messager.alert('Error', response.err, 'error');
                }
              })
              .fail((jqXHR, textStatus, errorThrown) => {
                //$.messager.progress('close');
                $.messager.alert('Error', `${jqXHR.status}: ${jqXHR.statusText} `, 'error');
              });
          }
        }
      }

      rejectChanges() {
        this.$dg.datagrid('rejectChanges');
        this.editIndex = undefined;
        this.hook = false;
      }

      showDetailWindow(data) {
        this.id = (data.Id || 0);
        this.$detailwindow.window("open");
        this.$form.form('reset');
        this.$form.form('load', data);
      }

      showDetailCompany(data) {
        $dgWidth = $('#panel-leads .datagrid-view').width();

        $("#panel-infor").show();

        this.id = (data.Id || 0);
        this.$formview.form('reset');
        this.$formview.form('load', data);

        // Contact
        showContacts();

        // Project
        showProjects();

        // Activity
        showActivities();

        // Quotation
        showQuotations();

        // Sale
        showSales();
      }

      deleteItem() {
        $.messager.confirm('Confirm', 'Are you sure you want to delete this record?', result => {
          if (result) {
            const url = `/Companies/Delete/${this.item.Id}`;
            $.get(url).done(res => {
              if (res.success) {
                toastr.success("Delete Success");
                this.$detailwindow.window("close");
                this.reloadData();
              } else {
                $.messager.alert("Error", res.err, "error");
              }
            });
          }
        });
      }

      saveItem() {
        if (this.$form.form('enableValidation').form('validate')) {
          let company = this.$form.serializeJSON();
          let url = '/Companies/Edit';

          if (this.MODELSTATE === 'Added') {
            url = '/Companies/Create';
          }
          var token = $('input[name="__RequestVerificationToken"]', this.$form).val();
          //$.messager.progress({ title: 'Please wait', msg: 'Accepting data...', interval: 200 });
          $.ajax({
            type: "POST",
            url: url,
            data: {
              __RequestVerificationToken: token,
              company: company
            },
            dataType: 'json',
            contentType: 'application/x-www-form-urlencoded; charset=utf-8'
          })
            .done(response => {
              //$.messager.progress('close');
              if (response.success) {
                this.hook = false;
                this.$form.form('disableValidation');
                this.$dg.datagrid('reload');
                this.$detailwindow.window("close");
                toastr.success("Saved successfully");
              } else {
                $.messager.alert("Error", response.err, "error");
              }
            })
            .fail((jqXHR, textStatus, errorThrown) => {
              $.messager.alert('Error', `${jqXHR.status}: ${jqXHR.statusText} `, 'error');
            });
        }
      }

      closedetailwindow() {
        this.$detailwindow.window('close');
      }
    }

    //Contact

    $(() => {
      var mycompany = new company();
      console.log(mycompany);
    })

  </script>

}
