@model MicroCrm.Domain.Models.MenuItem
@{
  ViewBag.Title = "Menu config";
  ViewData["PageName"] = "menuitems_index";
  ViewData["Heading"] = "<i class='fal fa-sitemap text-primary'></i>  Menu config";
  ViewData["Category1"] = "System Management";
  ViewData["PageDescription"] = "";
}
@section HeadBlock {
  
  <link href="~/css/formplugins/bootstrap-daterangepicker/bootstrap-daterangepicker.css" rel="stylesheet" asp-append-version="true" />
  <link href="~/js/easyui/themes/insdep/easyui.css" rel="stylesheet" asp-append-version="true" />
}
<div class="row">
  <div class="col-lg-12 col-xl-12">
    <div id="panel-1" class="panel">
      <div class="panel-hdr">
        <h2>
          Navigation menu
        </h2>
        <div class="panel-toolbar">
          <button class="btn btn-panel bg-transparent fs-xl w-auto h-auto rounded-0" data-action="panel-collapse" data-toggle="tooltip" data-offset="0,10" data-original-title="Collapse"><i class="fal fa-window-minimize"></i></button>
          <button class="btn btn-panel bg-transparent fs-xl w-auto h-auto rounded-0" data-action="panel-fullscreen" data-toggle="tooltip" data-offset="0,10" data-original-title="Fullscreen"><i class="fal fa-expand"></i></button>
          @*<button class="btn btn-panel bg-transparent fs-xl w-auto h-auto rounded-0" data-action="panel-close" data-toggle="tooltip" data-offset="0,10" data-original-title="Close"><i class="fal fa-times"></i></button>*@
        </div>

      </div>
      <div class="panel-container enable-loader show">
        <div class="loader"><i class="fal fa-spinner-third fa-spin-4x fs-xxl"></i></div>
        <div class="panel-content py-2 rounded-bottom border-faded border-left-0 border-right-0  text-muted bg-faded bg-subtlelight-fade">
          <div class="row no-gutters align-items-center">
            <div class="col">
              <!-- To enable authorization control, please refer to @@if (Html.IsAuthorize("Create") -->
              <div class="btn-group btn-group-sm">
                <button name="searchbutton" onclick="reloadData()" class="btn btn-default"> <span class="fal fa-search mr-1"></span> Search </button>
              </div>
              <div class="btn-group btn-group-sm">
                <button name="createbutton" onclick="createWithController()" class="btn btn-sm btn-primary"> <i class=" fal fa-sitemap mr-1"></i> Generate Menu </button>
              </div>
              <div class="btn-group btn-group-sm">
                <button name="appendbutton" onclick="appendData()" class="btn btn-default"> <span class="fal fa-plus mr-1"></span> Add </button>
              </div>
              <div class="btn-group btn-group-sm">
                <button name="deletebutton" disabled onclick="removeData()" class="btn btn-default"> <span class="fal fa-times mr-1"></span> Delete </button>
              </div>
              <div class="btn-group btn-group-sm">
                <button name="savebutton" disabled onclick="acceptChanges()" class="btn btn-default"> <span class="fal fa-save mr-1"></span> Save </button>
              </div>
              <div class="btn-group btn-group-sm">
                <button name="cancelbutton" disabled onclick="rejectChanges()" class="btn btn-default"> <span class="fal fa-ban mr-1"></span> Cancel </button>
              </div>

              <div class="btn-group btn-group-sm hidden-xs">
                <button name="importbutton"  type="button" onclick="importExcel.upload()" class="btn btn-default"><span class="fal fa-cloud-upload mr-1"></span> Import </button>
                <button type="button" class="btn btn-default dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                  <span class="sr-only">Toggle Dropdown</span>
                </button>
                <div class="dropdown-menu">
                  <button name="downloadbutton" class="dropdown-item js-waves-on" href="javascript:importExcel.downloadtemplate()"><span class="fal fa-download"></span> Download the template  </button>
                </div>
              </div>
              <div class="btn-group btn-group-sm ">
                <button  name="exportbutton" onclick="exportexcel()" class="btn btn-default"> <span class="fal fa-file-excel mr-1"></span>  Export </button>
              </div>
            </div>

          </div>

        </div>
        <div class="panel-content">
          <div class="table-responsive">
            <table id="menuitems_datagrid"></table>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

@await Component.InvokeAsync("ImportExcel", new ImportExcelOptions
{
  entity = "MenuItem",
  folder = "MenuItems",
  url = "/MenuItems/ImportExcel",
  tpl = "/MenuItems/Download"


})


@section ScriptsBlock {
  <script src="~/js/dependency/moment/moment.js" asp-append-version="true"></script>
  <script src="~/js/formplugins/bootstrap-daterangepicker/bootstrap-daterangepicker.js" asp-append-version="true"></script>
  <script src="~/js/easyui/jquery.easyui.min.js" asp-append-version="true"></script>
  <script src="~/js/easyui/plugins/datagrid-filter.js" asp-append-version="true"></script>
  <script src="~/js/easyui/plugins/columns-ext.js" asp-append-version="true"></script>
  <script src="~/js/easyui/plugins/columns-reset.js" asp-append-version="true"></script>
  <script src="~/js/easyui/locale/easyui-lang-en.js" asp-append-version="true"></script>
  <script src="~/js/easyui/jquery.easyui.component.js" asp-append-version="true"></script>
  <script src="~/js/jquery.extend.formatter.js" asp-append-version="true"></script>
  <script src="~/js/jquery.custom.extend.js" asp-append-version="true"></script>
  <script src="~/js/plugin/filesaver/FileSaver.js" asp-append-version="true"></script>
  <script src="~/js/plugin/jquery.serializejson/jquery.serializejson.js" asp-append-version="true"></script>
  <script type="text/javascript">
    //Full Screen Event
    document.addEventListener('panel.onfullscreen', () => {
      $dg.treegrid('resize');
    });
      var entityname = "MenuItem";
        var menuitem = {};
//Generate Menu
      function createWithController() {
        $.messager.progress({ title: 'Processing, please wait patiently!' });
        $.post('/MenuItems/CreateWithController').done(res => {

          $.messager.progress('close');
          if (res.success) {
            $.messager.alert("Success", "Menu created successfully！", 'info', function () {
              $dg.datagrid('reload');
            });
          } else {
            $.messager.alert("Error", "Generate Error！" + res.err, 'error', function () {

            });
          }

        });

      }
	   //Execute Export to download Excel
	   function exportexcel() {
				var filterRules = JSON.stringify($dg.datagrid("options").filterRules);
				//console.log(filterRules);
				$.messager.progress({ title: "Export in progress!" });
				var formData = new FormData();
				formData.append("filterRules", filterRules);
				formData.append("sort", "Id");
				formData.append("order", "asc");
				$.postDownload("/MenuItems/ExportExcel", formData).then(res => {
                    $.messager.progress("close");
                }).catch(err => {
                    //console.log(err);
                    $.messager.progress("close");
                    $.messager.alert("Error", err.statusText, "error");
                });

		}

        var editIndex = undefined;
        //Selected Records
       function onSelect(index, row) {
          menuitem = row;
       }
       //Reload Data
      function reloadData() {
        if (endEditing()) {
          $dg.datagrid("reload");
          $dg.datagrid("uncheckAll");
          $dg.datagrid("unselectAll");
        }
      }
    //CloseEditStatus
    function endEditing() {
        if (editIndex === undefined) {
          return true;
        }
        if ($dg.datagrid("validateRow", editIndex)) {
          $dg.datagrid("endEdit", editIndex);
          return true;
        } else {
          return false;
        }
      }
    //Click on the column to open the Edit function
      function onClickCell(index, field) {
        menuitem = $dg.datagrid('getRows')[index];
        var _operates = ["_operate1", "_operate2", "_operate3", "ck"];
        if ($.inArray(field, _operates) >= 0) {
          return;
        }
        if (editIndex !== index) {
          if (endEditing()) {
            $dg.datagrid("selectRow", index)
              .datagrid("beginEdit", index);
            //editIndex = index;
            var ed = $dg.datagrid("getEditor", { index: index, field: field });
            if (ed) {
              ($(ed.target).data("textbox") ? $(ed.target).textbox("textbox") : $(ed.target)).focus();
            }
          } else {
            $dg.datagrid("selectRow", editIndex);
          }
        }
      }
    //Added records
      function appendData() {
        if (endEditing()) {
          //Initialize the default value for the Required field
          $dg.datagrid("insertRow",
            {
              index: 0,
              row: {
                Url: '#',
                Controller: '#',
                Action: '#',
                IconCls: '',
                Target:'_self',
                IsEnabled:true,

              }
            });
          //editIndex = 0;
          $dg.datagrid("beginEdit", 0);
        }
      }
    //Delete Edit Row
      function removeData() {

          deletechecked();


      }
    //Delete the selected row
      function deletechecked() {
        var rows = $dg.datagrid("getChecked");
        if (rows.length > 0) {
          var id = rows.map(item => {
            return item.Id;
          });
          $.messager.confirm("Confirm", `You must delete this <span class='badge badge-danger badge-pill'>${id.length} </span> line?`, result => {
            if (result) {
              $.post("/MenuItems/DeleteChecked", { id: id })
                .done(response => {
                  if (response.success) {
                    reloadData();
                  } else {
                    $.messager.alert("Error", response.err, "error");
                  }
                })
                .fail((jqXHR, textStatus, errorThrown) => {
                  //console.log(errorThrown);
                  $.messager.alert("Error", "Submit Error!" + errorThrown, "error");
                });
            }
          });
        } else {
          $.messager.alert("Success", "Please select the record to be deleted first!");
        }
      }
    //Submit Accept backend database
    function acceptChanges() {
      if (endEditing()) {
        if ($dg.datagrid("getChanges").length) {
          const inserted = $dg.datagrid('getChanges', 'inserted').map(item => {
            item.TrackingState = 1;
            return item;
          });
          const updated = $dg.datagrid('getChanges', 'updated').map(item => {
            item.TrackingState = 2
            return item;
          });
          const deleted = $dg.datagrid('getChanges', 'deleted').map(item => {
            item.TrackingState = 3
            return item;
          });
          //Filter Deleted Duplicates
          const changed = inserted.concat(updated.filter(item => {
            return !deleted.includes(item);
          })).concat(deleted);
          $.post("/MenuItems/AcceptChanges", { menuitems: changed })
            .done(response => {
              if (response.success) {
                $.messager.alert("Success", "Submitted successfully!");
                $dg.datagrid("acceptChanges");
                reloadData();
              } else {
                $.messager.alert("Error", response.err, "error");
              }
            })
            .fail(function (jqXHR, textStatus, errorThrown) {
              //console.log(errorThrown);
              $.messager.alert("Error", "Submit Error!" + errorThrown, "error");
            });
        }
      }
    }
	function rejectChanges() {
			$dg.datagrid("rejectChanges");
			editIndex = undefined;
	}



    //Initialize and define datagrid
    var $dg = $("#menuitems_datagrid");
      $(() => {
        //Define the datagrid structure
        $dg.datagrid({
          rownumbers: true,
          checkOnSelect: false,
          selectOnCheck: false,
          idField: 'Id',
          sortName: 'Id',
          sortOrder: 'desc',
          remoteFilter: true,
          clientPaging: false,
          singleSelect: false,
          method: 'get',
          onClickCell: onClickCell,
          pagination: true,
          striped: true,
          height: 670,
          pageSize: 15,
          pageList: [15, 20, 50, 100, 500, 2000],
          onBeforeLoad: function () {
            $('.enable-loader').removeClass('enable-loader')
          },
          onLoadError: function () {
            console.log('error')
          },
          onLoadSuccess: function (data) {
            editIndex = undefined;
          },
          onSelect: function (index, row) {
            menuitem = row;
          },
          onCheck: function (index,row) {
             $("button[name*='deletebutton']").prop('disabled', false);
            menuitem = row;
          },
          onBeginEdit: function (index, row) {
            editIndex = index;
          },
          onEndEdit: function (index, row) {
            var ed = $(this).datagrid("getEditor", { index: editIndex, field: "ParentId" });
            var parenttitle = $(ed.target).combobox("getText");
            var parentid = $(ed.target).combobox("getValue");
            row["ParentTitle"] = parenttitle;
            row["ParentId"] = parentid;
            editIndex = undefined;
          },
          onBeforeEdit: function (index, row) {
            $("button[name*='deletebutton']").prop('disabled', false);
            $("button[name*='cancelbutton']").prop('disabled', false);
          $("button[name*='savebutton']").prop('disabled', false);
            row.editing = true;
            $(this).datagrid('refreshRow', index);
          },
          onAfterEdit: function (index, row) {
            row.editing = false;
            $(this).datagrid('refreshRow', index);
          },
          onCancelEdit: function (index, row) {
            row.editing = false;
            $(this).datagrid('refreshRow', index);
            editIndex = index;
          },
          columns: [[
            /*Enable CheckBox selection function*/
            { field: 'ck', checkbox: true },
            {
              field: 'Title',
              title: '<span class="required">@Html.DisplayNameFor(model => model.Title)</span>',
              width: 160,
              editor: {
                type: 'textbox',
                options: { prompt: '@Html.DescriptionFor(model => model.Title)', required: true, validType: 'length[0,38]' }
              },
              sortable: true,
              resizable: true
            },
            {
              field: 'Description',
              title: '@Html.DisplayNameFor(model => model.Description)',
              width: 160,
              editor: {
                type: 'textbox',
                options: { prompt: '@Html.DescriptionFor(model => model.Description)', required: true, validType: 'length[0,128]' }
              },
              sortable: true,
              resizable: true
            },
            {
              field: 'LineNum',
              title: '<span class="required">@Html.DisplayNameFor(model => model.LineNum)</span>',
              width: 80,
              editor: {
                type: 'textbox',
                options: { prompt: '@Html.DescriptionFor(model => model.LineNum)', required: true, validType: 'length[0,5]' }
              },
              sortable: true,
              resizable: true
            },
            {
              field: 'ParentId',
              title: '@Html.DisplayNameFor(model => model.ParentId)',
              width: 140,
              sortable: true,
              resizable: true,
              formatter: function (value, row) {
                return row.ParentTitle;
              },
              editor: {
                type: 'combobox',
                options: {
                  prompt: '@Html.DescriptionFor(model => model.ParentId)',
                  mode: 'remote',
                  valueField: 'Id',
                  textField: 'Title',
                  method: 'get',
                  url: '/MenuItems/GetMenuItems',
                  required: false
                }
              }
            },
            {
              field: 'Url',
              title: '<span class="required">@Html.DisplayNameFor(model => model.Url)</span>',
              width: 200,
              editor: {
                type: 'textbox',
                options: { prompt: '@Html.DescriptionFor(model => model.Url)', required: true, validType: 'length[0,256]' }
              },
              sortable: true,
              resizable: true
            },
            {
              field: 'Controller',
              title: '@Html.DisplayNameFor(model => model.Controller)',
              width: 160,
              editor: {
                type: 'textbox',
                options: { prompt: '@Html.DescriptionFor(model => model.Controller)', required: false, validType: 'length[0,128]' }
              },
              sortable: true,
              resizable: true
            },
            {
              field: 'Action',
              title: '@Html.DisplayNameFor(model => model.Action)',
              width: 140,
              editor: {
                type: 'textbox',
                options: { prompt: '@Html.DescriptionFor(model => model.Action)', required: false, validType: 'length[0,128]' }
              },
              sortable: true,
              resizable: true
            },
            {
              field: 'Icon',
              title: '@Html.DisplayNameFor(model => model.Icon)',
              width: 160,
              editor: {
                type: 'textbox',
                options: { prompt: '@Html.DescriptionFor(model => model.Icon)', required: false, validType: 'length[0,30]' }
              },
              sortable: true,
              resizable: true
            },
            {
              field: 'Target',
              title: '@Html.DisplayNameFor(model => model.Target)',
              width: 160,
              editor: {
                type: 'combobox',
                options: {
                  prompt: '@Html.DescriptionFor(model => model.Target)',
                  required: false,
                  data: [{ value: '_self', text: '_self' },
                    { value: '_blank', text: '_blank' },
                    { value: '_parent', text: '_parent' },
                    { value: '_top', text: '_top' }
                   ],
                  validType: 'length[0,30]'
                }
              },
              sortable: true,
              resizable: true
            },
            {
              field: 'IsEnabled',
              title: '<span class="required">@Html.DisplayNameFor(model => model.IsEnabled)</span>',
              width: 120,
              align: 'center',
              editor: {
                type: 'booleaneditor',
                options: {
                  prompt: '@Html.DescriptionFor(model => model.IsEnabled)',
                  required: true
                }
              },
              formatter: booleanformatter,
              sortable: true,
              resizable: true
            },

          ]]
        })
        .datagrid("enableFilter", [
          {
            field: "IsEnabled",
            type: "booleanfilter"
          },
          {
            field: "ParentId",
            type: "combobox",
            options: {
              valueField: "Id",
              textField: "Title",
              method: "get",
              url: "/MenuItems/GetMenuItems",
              onChange: function (value) {
                if (value === "" || value === null) {
                  $dg.datagrid("removeFilterRule", "ParentId");
                } else {
                  $dg.datagrid("addFilterRule", {
                    field: "ParentId",
                    op: "equal",
                    value: value.toString()
                  });
                }
                $dg.datagrid("doFilter");
              }
            }
          }
        ])
          .datagrid('load','/MenuItems/GetData',);
      });
  </script>


}


